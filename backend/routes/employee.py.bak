from flask import Blueprint, request, jsonify, current_app, send_file
from flask_jwt_extended import jwt_required
from flask_cors import cross_origin
from ..models.employee import Employee, EmployeeAttachment
from ..models.user import User
from ..models.department import Department
from ..models.education import EmployeeEducation
from ..models.contract import EmployeeContract
from .. import db
from datetime import datetime
from werkzeug.utils import secure_filename
import os

employee_bp = Blueprint('employee', __name__)

# 配置文件上传路径
def get_employee_upload_path():
    return os.path.join(current_app.config['UPLOAD_FOLDER'], 'employee_attachments')

def get_contract_upload_path():
    return os.path.join(current_app.config['UPLOAD_FOLDER'], 'contracts')

# 允许的文件类型
ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'xls', 'xlsx'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@employee_bp.route('/employee', methods=['GET'])
@cross_origin()
def get_employee_list():
    """获取员工列表"""
    try:
        page = request.args.get('page', 1, type=int)
        per_page = request.args.get('per_page', 10, type=int)
        name = request.args.get('name', '')
        department_id = request.args.get('department_id', type=int)
        status = request.args.get('status')
        
        # 构建查询
        query = Employee.query
        
        # 添加名字搜索条件
        if name:
            query = query.filter(Employee.name.ilike(f'%{name}%'))
            
        # 应用其他过滤条件
        if department_id:
            query = query.filter_by(department_id=department_id)
        if status:
            query = query.filter_by(status=status)
            
        # 添加调试日志
        print(f"搜索条件 - 名字: {name}, 部门: {department_id}, 状态: {status}")
            
        employees = query.paginate(page=page, per_page=per_page)
        
        return jsonify({
            'code': 200,
            'message': 'success',
            'data': [emp.to_dict() for emp in employees.items],
            'total': employees.total,
            'current_page': employees.page,
            'pages': employees.pages
        }), 200
    except Exception as e:
        print(f"查询出错: {str(e)}")  # 添加错误日志
        return jsonify({
            'code': 500,
            'message': str(e)
        }), 500

@employee_bp.route('/employees/<int:emp_id>', methods=['GET'])
@jwt_required()
@cross_origin()
def get_employee(emp_id):
    """获取单个员工详情"""
    try:
        employee = Employee.query.get_or_404(emp_id)
        return jsonify(employee.to_dict()), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@employee_bp.route('/employees', methods=['POST'])
@jwt_required()
@cross_origin()
def create_employee():
    """创建新员工"""
    try:
        data = request.get_json()
        print("接收到的创建员工数据:", data)  # 打印接收到的数据
        
        # 验证必要字段
        required_fields = ['employee_no', 'name', 'department_id']
        if not all(k in data for k in required_fields):
            return jsonify({'error': 'Missing required fields'}), 400
            
        # 检查工号是否已存在
        if Employee.query.filter_by(employee_no=data['employee_no']).first():
            return jsonify({'error': 'Employee number already exists'}), 400
            
        # 检查身份证号是否已存在
        if 'id_card' in data and data['id_card']:
            if Employee.query.filter_by(id_card=data['id_card']).first():
                return jsonify({'error': 'ID card number already exists'}), 400
                
        # 检查部门是否存在
        if not Department.query.get(data['department_id']):
            return jsonify({'error': 'Department not found'}), 404
            
        # 处理日期字段
        if 'birth_date' in data and data['birth_date']:
            data['birth_date'] = datetime.strptime(data['birth_date'], '%Y-%m-%d').date()
        if 'entry_date' in data and data['entry_date']:
            data['entry_date'] = datetime.strptime(data['entry_date'], '%Y-%m-%d').date()
            
        # 创建新员工
        new_employee = Employee(
            employee_no=data['employee_no'],
            name=data['name'],
            gender=data.get('gender'),
            birth_date=data.get('birth_date'),
            id_card=data.get('id_card'),
            phone=data.get('phone'),
            email=data.get('email'),
            address=data.get('address'),
            department_id=data['department_id'],
            position=data.get('position'),
            entry_date=data.get('entry_date'),
            status='active',
            base_salary=data.get('base_salary'),
            bank_account=data.get('bank_account'),
            bank_name=data.get('bank_name'),
            notes=data.get('notes')
        )
        
        print("新员工对象的字段值:", {
            'base_salary': new_employee.base_salary,
            'bank_account': new_employee.bank_account,
            'bank_name': new_employee.bank_name,
            'notes': new_employee.notes
        })
        
        db.session.add(new_employee)
        db.session.commit()
        
        # 打印保存后的数据
        print("保存后的员工数据:", new_employee.to_dict())
        
        return jsonify(new_employee.to_dict()), 201
    except Exception as e:
        db.session.rollback()
        print("创建员工时出错:", str(e))  # 打印错误信息
        return jsonify({'error': str(e)}), 500

@employee_bp.route('/employees/<int:emp_id>', methods=['PUT'])
@jwt_required()
@cross_origin()
def update_employee(emp_id):
    """更新员工信息"""
    try:
        employee = Employee.query.get_or_404(emp_id)
        data = request.get_json()
        
        # 检查工号唯一性
        if 'employee_no' in data and data['employee_no'] != employee.employee_no:
            if Employee.query.filter_by(employee_no=data['employee_no']).first():
                return jsonify({'error': 'Employee number already exists'}), 400
                
        # 检查身份证号唯一性
        if 'id_card' in data and data['id_card'] != employee.id_card:
            if Employee.query.filter_by(id_card=data['id_card']).first():
                return jsonify({'error': 'ID card number already exists'}), 400
                
        # 处理日期字段
        if 'birth_date' in data and data['birth_date']:
            data['birth_date'] = datetime.strptime(data['birth_date'], '%Y-%m-%d').date()
        if 'entry_date' in data and data['entry_date']:
            data['entry_date'] = datetime.strptime(data['entry_date'], '%Y-%m-%d').date()
        if 'leave_date' in data and data['leave_date']:
            data['leave_date'] = datetime.strptime(data['leave_date'], '%Y-%m-%d').date()
            
        # 更新字段
        for key, value in data.items():
            if hasattr(employee, key):
                setattr(employee, key, value)
                
        db.session.commit()
        return jsonify(employee.to_dict()), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@employee_bp.route('/employees/<int:emp_id>/leave', methods=['PUT'])
@jwt_required()
@cross_origin()
def employee_leave(emp_id):
    """办理员工离职"""
    try:
        employee = Employee.query.get_or_404(emp_id)
        data = request.get_json()
        
        if not data or 'leave_date' not in data:
            return jsonify({'error': 'Leave date is required'}), 400
            
        # 设置离职日期和状态
        employee.leave_date = datetime.strptime(data['leave_date'], '%Y-%m-%d').date()
        employee.status = 'inactive'
        
        # 如果关联了用户账号，禁用该账号
        if employee.user:
            employee.user.is_active = False
            
        db.session.commit()
        return jsonify(employee.to_dict()), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@employee_bp.route('/api/employee/list', methods=['GET', 'OPTIONS'])
@cross_origin()
def get_employee_list():
    # 处理 OPTIONS 请求
    if request.method == 'OPTIONS':
        response = jsonify({'code': 200})
        response.headers.add('Access-Control-Allow-Origin', 'http://localhost:5173')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
        response.headers.add('Access-Control-Allow-Methods', 'GET,OPTIONS')
        return response

    # 获取查询参数
    page = request.args.get('page', 1, type=int)
    page_size = request.args.get('pageSize', 10, type=int)
    name = request.args.get('name', '')
    department = request.args.get('department', '')
    status = request.args.get('status', '')

    # 构建查询
    query = Employee.query

    # 应用过滤条件
    if name:
        query = query.filter(Employee.name.ilike(f'%{name}%'))
    if department:
        query = query.filter_by(department_id=department)
    if status:
        query = query.filter_by(status=status)

    # 获取分页数据
    pagination = query.paginate(page=page, per_page=page_size)

    return jsonify({
        'code': 200,
        'data': [emp.to_dict() for emp in pagination.items],
        'total': pagination.total
    })

@employee_bp.route('/employees/no/<string:employee_no>', methods=['GET'])
@jwt_required()
@cross_origin()
def get_employee_by_no(employee_no):
    """根据员工编号获取详情（需要证）"""
    try:
        employee = Employee.query.filter_by(employee_no=employee_no).first_or_404()
        return jsonify(employee.to_dict()), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@employee_bp.route('/detail/<string:employee_no>', methods=['GET', 'OPTIONS'])
@cross_origin()
def get_employee_detail_public(employee_no):
    """根据员工编号获取详情（公开接口）"""
    if request.method == 'OPTIONS':
        response = jsonify({'code': 200})
        return response

    try:
        # 确保 employee_no 作为字符串处理
        print(f"查询号: {employee_no}")  # 添加日志
        
        # 使用 filter_by 精确匹配工号
        employee = Employee.query.filter_by(employee_no=str(employee_no)).first()
        
        if not employee:
            return jsonify({
                'code': 404,
                'error': f'未找到工号为 {employee_no} 的员工'
            }), 404
            
        return jsonify({
            'code': 200,
            'data': employee.to_dict()
        }), 200
        
    except Exception as e:
        print(f"获取员工详情错误: {str(e)}")  # 添加错误日志
        return jsonify({
            'code': 500,
            'error': str(e)
        }), 500

@employee_bp.route('/<employee_no>/attachments/upload', methods=['POST'])
@cross_origin()
def upload_attachment(employee_no):
    try:
        current_app.logger.info(f"开始处理文件上传: employee_no={employee_no}")
        
        if 'file' not in request.files:
            return jsonify({
                'code': 400,
                'message': '没有文件被上传'
            }), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({
                'code': 400,
                'message': '未选择文件'
            }), 400

        if not allowed_file(file.filename):
            return jsonify({
                'code': 400,
                'message': '不支持的文件类型'
            }), 400

        try:
            # 确保上传目录存在
            upload_path = os.path.join(get_employee_upload_path(), employee_no)
            os.makedirs(upload_path, exist_ok=True)
            current_app.logger.debug(f"上传目录: {upload_path}")

            # 安全地获��文件名并保存文件
            filename = secure_filename(file.filename)
            timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
            safe_filename = f"{timestamp}_{filename}"
            file_path = os.path.join(upload_path, safe_filename)
            
            # 保存文件
            file.save(file_path)
            current_app.logger.debug(f"文件已保存: {file_path}")

            # 获取文件信息
            file_size = os.path.getsize(file_path)
            file_type = filename.rsplit('.', 1)[1].lower()

            # 保存到数据库
            attachment = EmployeeAttachment(
                employee_no=employee_no,
                file_name=filename,
                file_type=file_type,
                file_size=file_size,
                file_path=file_path,
                uploader=request.headers.get('X-User-Name', 'system'),
                description=request.form.get('description', '')
            )
            
            db.session.add(attachment)
            db.session.commit()

            return jsonify({
                'code': 200,
                'message': '上传成功',
                'data': attachment.to_dict()
            })

        except Exception as e:
            current_app.logger.error(f"保存文件失败: {str(e)}")
            if 'file_path' in locals() and os.path.exists(file_path):
                os.remove(file_path)  # 清理已上传的文件
            raise

    except Exception as e:
        current_app.logger.error(f"文件上传错误: {str(e)}")
        return jsonify({
            'code': 500,
            'message': f'文件上传失败: {str(e)}'
        }), 500

# 获取员工附件列表
@employee_bp.route('/<employee_no>/attachments', methods=['GET'])
@cross_origin()
def get_attachments(employee_no):
    try:
        # 使用 SQLAlchemy 查询
        attachments = EmployeeAttachment.query.filter_by(
            employee_no=employee_no,
            status='active'
        ).order_by(EmployeeAttachment.upload_time.desc()).all()
        
        return jsonify({
            'code': 200,
            'message': '获取成功',
            'data': [attachment.to_dict() for attachment in attachments]
        })

    except Exception as e:
        current_app.logger.error(f"获取附件列表错误: {str(e)}")
        return jsonify({
            'code': 500,
            'message': '获取附件列表失败'
        }), 500

# 下载附件
@employee_bp.route('/<employee_no>/attachments/<int:attachment_id>/download', methods=['GET'])
@cross_origin()
def download_attachment(employee_no, attachment_id):
    try:
        # 查询附件信息
        attachment = EmployeeAttachment.query.filter_by(
            id=attachment_id,
            employee_no=employee_no,
            status='active'
        ).first()
        
        if not attachment:
            return jsonify({
                'code': 404,
                'message': '附件不存在'
            }), 404

        if not os.path.exists(attachment.file_path):
            return jsonify({
                'code': 404,
                'message': '文件不存在'
            }), 404

        return send_file(
            attachment.file_path,
            as_attachment=True,
            download_name=attachment.file_name,
            mimetype=f'application/{attachment.file_type}'
        )

    except Exception as e:
        current_app.logger.error(f"下载附件错误: {str(e)}")
        return jsonify({
            'code': 500,
            'message': '下载附件失败'
        }), 500

@employee_bp.route('/<employee_no>/attachments/<int:attachment_id>', methods=['DELETE'])
@cross_origin()
def delete_attachment(employee_no, attachment_id):
    try:
        # 查询附件信息
        attachment = EmployeeAttachment.query.filter_by(
            id=attachment_id,
            employee_no=employee_no,
            status='active'
        ).first()
        
        if not attachment:
            return jsonify({
                'code': 404,
                'message': '附件不存在'
            }), 404

        # 软删除：更新状态为 inactive
        attachment.status = 'inactive'
        db.session.commit()

        # 如果需要同时删除物理文件，取消下面的注释
        # if os.path.exists(attachment.file_path):
        #     os.remove(attachment.file_path)

        return jsonify({
            'code': 200,
            'message': '删除成功'
        })

    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"删除附件错误: {str(e)}")
        return jsonify({
            'code': 500,
            'message': '删除附件失败'
        }), 500

@employee_bp.route('/attachments/<int:attachment_id>/preview', methods=['GET'])
@cross_origin()
def preview_attachment(attachment_id):
    try:
        # 查询附件信息
        attachment = EmployeeAttachment.query.filter_by(
            id=attachment_id,
            status='active'
        ).first()
        
        if not attachment:
            return jsonify({
                'code': 404,
                'message': '附件不存在'
            }), 404

        if not os.path.exists(attachment.file_path):
            return jsonify({
                'code': 404,
                'message': '文件不存在'
            }), 404

        # 检查文件类型是否支持预览
        preview_types = {'pdf', 'jpg', 'jpeg', 'png'}
        file_type = attachment.file_type.lower()
        
        if file_type not in preview_types:
            return jsonify({
                'code': 400,
                'message': '该文件类型不支持预览'
            }), 400

        # 返回文件预览URL
        return jsonify({
            'code': 200,
            'message': '获取成功',
            'data': {
                'url': f'/api/employee/attachments/{attachment_id}/preview/content'
            }
        })

    except Exception as e:
        current_app.logger.error(f"获取预览URL错误: {str(e)}")
        return jsonify({
            'code': 500,
            'message': '获取预览失败'
        }), 500

@employee_bp.route('/attachments/<int:attachment_id>/preview/content', methods=['GET'])
@cross_origin()
def preview_attachment_content(attachment_id):
    try:
        attachment = EmployeeAttachment.query.filter_by(
            id=attachment_id,
            status='active'
        ).first_or_404()

        return send_file(
            attachment.file_path,
            mimetype=f'application/{attachment.file_type}'
        )

    except Exception as e:
        current_app.logger.error(f"预览文件错误: {str(e)}")
        return jsonify({
            'code': 500,
            'message': '预览失败'
        }), 500

@employee_bp.route('/<employee_no>/attachments/batch-upload', methods=['POST'])
@cross_origin()
def batch_upload_attachments(employee_no):
    try:
        if 'files[]' not in request.files:
            return jsonify({
                'code': 400,
                'message': '没有文件被上传'
            }), 400

        files = request.files.getlist('files[]')
        uploaded_files = []
        failed_files = []

        for file in files:
            try:
                if file.filename == '':
                    continue

                if not allowed_file(file.filename):
                    failed_files.append({
                        'name': file.filename,
                        'reason': '不支持的文件类型'
                    })
                    continue

                # 确保上传目录存在
                upload_path = os.path.join(current_app.config['UPLOAD_FOLDER'], employee_no)
                os.makedirs(upload_path, exist_ok=True)

                # 安全地获取文件名并保存文件
                filename = secure_filename(file.filename)
                timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
                safe_filename = f"{timestamp}_{filename}"
                file_path = os.path.join(upload_path, safe_filename)
                
                # 保存文件
                file.save(file_path)

                # 获取文件信息
                file_size = os.path.getsize(file_path)
                file_type = filename.rsplit('.', 1)[1].lower()

                # 保存到数据库
                attachment = EmployeeAttachment(
                    employee_no=employee_no,
                    file_name=filename,
                    file_type=file_type,
                    file_size=file_size,
                    file_path=file_path,
                    uploader=request.headers.get('X-User-Name', 'system'),
                    description=request.form.get('description', '')
                )
                
                db.session.add(attachment)
                uploaded_files.append(attachment.to_dict())

            except Exception as e:
                current_app.logger.error(f"上传文件 {file.filename} 失败: {str(e)}")
                if 'file_path' in locals() and os.path.exists(file_path):
                    os.remove(file_path)
                failed_files.append({
                    'name': file.filename,
                    'reason': str(e)
                })

        db.session.commit()

        return jsonify({
            'code': 200,
            'message': '批量上传完成',
            'data': {
                'success': uploaded_files,
                'failed': failed_files
            }
        })

    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"批量上传错误: {str(e)}")
        return jsonify({
            'code': 500,
            'message': f'批量上传失败: {str(e)}'
        }), 500

# 获取教育经历列表
@employee_bp.route('/<employee_no>/education', methods=['GET'])
@cross_origin()
def get_education_history(employee_no):
    """获取员工教育经历列表"""
    try:
        education_list = EmployeeEducation.query.filter_by(
            employee_no=employee_no
        ).order_by(EmployeeEducation.start_date.desc()).all()
        
        return jsonify({
            'code': 200,
            'message': '获取成功',
            'data': [edu.to_dict() for edu in education_list]
        })
    except Exception as e:
        current_app.logger.error(f"获取教育经历失败: {str(e)}")
        return jsonify({
            'code': 500,
            'message': '获取教育经历失败'
        }), 500

# 添加教育经历
@employee_bp.route('/<employee_no>/education', methods=['POST'])
@cross_origin()
def add_education(employee_no):
    """添加教育经历"""
    try:
        data = request.get_json()
        
        # 验证必要字段
        required_fields = ['start_date', 'end_date', 'school', 'major', 'degree']
        if not all(k in data for k in required_fields):
            return jsonify({
                'code': 400,
                'message': '缺少必要字段'
            }), 400
            
        # 创建新记录
        education = EmployeeEducation(
            employee_no=employee_no,
            start_date=datetime.strptime(data['start_date'], '%Y-%m-%d').date(),
            end_date=datetime.strptime(data['end_date'], '%Y-%m-%d').date(),
            school=data['school'],
            major=data['major'],
            degree=data['degree'],
            description=data.get('description'),
            created_by=request.headers.get('X-User-Name', 'system')
        )
        
        db.session.add(education)
        db.session.commit()
        
        return jsonify({
            'code': 200,
            'message': '添加成功',
            'data': education.to_dict()
        })
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"添加教育经历失败: {str(e)}")
        return jsonify({
            'code': 500,
            'message': '添加教育经历失败'
        }), 500

# 更新教育经历
@employee_bp.route('/<employee_no>/education/<int:education_id>', methods=['PUT'])
@cross_origin()
def update_education(employee_no, education_id):
    """更新教育经历"""
    try:
        education = EmployeeEducation.query.filter_by(
            id=education_id,
            employee_no=employee_no
        ).first_or_404()
        
        data = request.get_json()
        
        # 更新字段
        if 'start_date' in data:
            education.start_date = datetime.strptime(data['start_date'], '%Y-%m-%d').date()
        if 'end_date' in data:
            education.end_date = datetime.strptime(data['end_date'], '%Y-%m-%d').date()
        if 'school' in data:
            education.school = data['school']
        if 'major' in data:
            education.major = data['major']
        if 'degree' in data:
            education.degree = data['degree']
        if 'description' in data:
            education.description = data['description']
            
        education.updated_by = request.headers.get('X-User-Name', 'system')
        
        db.session.commit()
        
        return jsonify({
            'code': 200,
            'message': '更新成功',
            'data': education.to_dict()
        })
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"更新教育经历失败: {str(e)}")
        return jsonify({
            'code': 500,
            'message': '更新教育经历失败'
        }), 500

# 删除教育经历
@employee_bp.route('/<employee_no>/education/<int:education_id>', methods=['DELETE'])
@cross_origin()
def delete_education(employee_no, education_id):
    """删除教育经历"""
    try:
        education = EmployeeEducation.query.filter_by(
            id=education_id,
            employee_no=employee_no
        ).first_or_404()
        
        db.session.delete(education)
        db.session.commit()
        
        return jsonify({
            'code': 200,
            'message': '删除成功'
        })
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"删除教育经历失败: {str(e)}")
        return jsonify({
            'code': 500,
            'message': '删除教育经历失败'
        }), 500

@employee_bp.route('/<string:employee_no>/contract', methods=['GET'])
@jwt_required()
@cross_origin()
def get_employee_contract(employee_no):
    """获取员工合同信息"""
    try:
        contract = EmployeeContract.query.filter_by(employee_no=employee_no).first()
        if contract:
            return jsonify({
                'code': 200,
                'data': contract.to_dict()
            }), 200
        return jsonify({
            'code': 404,
            'message': '未找到合同信息'
        }), 404
    except Exception as e:
        current_app.logger.error(f"获取合同信息失败: {str(e)}")
        return jsonify({
            'code': 500,
            'message': f'获取合同信息失败: {str(e)}'
        }), 500

@employee_bp.route('/<string:employee_no>/contract', methods=['POST'])
@jwt_required()
@cross_origin()
def add_employee_contract(employee_no):
    """添加员工合同"""
    try:
        data = request.get_json()
        new_contract = EmployeeContract(
            employee_no=employee_no,
            number=data['number'],
            type=data['type'],
            duration=data['duration'],
            start_date=datetime.strptime(data['start_date'], '%Y-%m-%d').date(),
            end_date=datetime.strptime(data['end_date'], '%Y-%m-%d').date(),
            sign_date=datetime.strptime(data['sign_date'], '%Y-%m-%d').date(),
            status=data['status'],
            created_by=request.headers.get('X-User-Name', 'system')
        )
        db.session.add(new_contract)
        db.session.commit()
        return jsonify({
            'code': 201,
            'message': '合同添加成功',
            'data': new_contract.to_dict()
        }), 201
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"合同添加失败: {str(e)}")
        return jsonify({
            'code': 500,
            'message': f'合同添加失败: {str(e)}'
        }), 500

@employee_bp.route('/<string:employee_no>/contract/<int:contract_id>', methods=['PUT'])
@jwt_required()
@cross_origin()
def update_employee_contract(employee_no, contract_id):
    """更新员工合同"""
    try:
        contract = EmployeeContract.query.filter_by(id=contract_id, employee_no=employee_no).first_or_404()
        data = request.get_json()
        contract.number = data.get('number', contract.number)
        contract.type = data.get('type', contract.type)
        contract.duration = data.get('duration', contract.duration)
        contract.start_date = datetime.strptime(data.get('start_date', contract.start_date.strftime('%Y-%m-%d')), '%Y-%m-%d').date()
        contract.end_date = datetime.strptime(data.get('end_date', contract.end_date.strftime('%Y-%m-%d')), '%Y-%m-%d').date()
        contract.sign_date = datetime.strptime(data.get('sign_date', contract.sign_date.strftime('%Y-%m-%d')), '%Y-%m-%d').date()
        contract.status = data.get('status', contract.status)
        contract.updated_by = request.headers.get('X-User-Name', 'system')
        db.session.commit()
        return jsonify({
            'code': 200,
            'message': '合同更新成功',
            'data': contract.to_dict()
        }), 200
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"合同更新失败: {str(e)}")
        return jsonify({
            'code': 500,
            'message': f'合同更新失败: {str(e)}'
        }), 500

@employee_bp.route('/<string:employee_no>/contract/<int:contract_id>', methods=['DELETE'])
@jwt_required()
@cross_origin()
def delete_employee_contract(employee_no, contract_id):
    """删除员工合同"""
    try:
        contract = EmployeeContract.query.filter_by(id=contract_id, employee_no=employee_no).first_or_404()
        db.session.delete(contract)
        db.session.commit()
        return jsonify({
            'code': 200,
            'message': '合同删除成功'
        }), 200
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"合同删除失败: {str(e)}")
        return jsonify({
            'code': 500,
            'message': f'合同删除失败: {str(e)}'
        }), 500 